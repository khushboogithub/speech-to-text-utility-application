
import edu.cmu.sphinx.api.Configuration;
import edu.cmu.sphinx.api.LiveSpeechRecognizer;
import edu.cmu.sphinx.api.SpeechResult;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import edu.cmu.sphinx.api.Microphone;
import edu.cmu.sphinx.api.*;
//import java.io.IOException;

import edu.cmu.sphinx.frontend.util.StreamDataSource;

//package edu.cmu.sphinx.api;

import java.io.InputStream;

import javax.sound.sampled.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * 
 * 
 * @author user
 */

 class LiveSpeechRecognizerExtention extends AbstractSpeechRecognizer {

   // private final MicrophoneExtention microphone;
private final MicrophoneExtention microphone;
    /**
     * Constructs new live recognition object.
     *
     * @param configuration common configuration
     * @throws IOException if model IO went wrong
     */
    public LiveSpeechRecognizerExtention(Configuration configuration) throws IOException
    {
        super(configuration);
        //microphone = speechSourceProvider.getMicrophone();
      
       //if(microphone.line.available()) 
       //{
       //} else {
           
      // }
        microphone =new  MicrophoneExtention(16000, 16, true, false);
        context.getInstance(StreamDataSource.class).setInputStream(microphone.getStream());
    }

    /**
     * Starts recognition process.
     *
     * @param clear clear cached microphone data
     * @see         LiveSpeechRecognizer#stopRecognition()
     */
    public void startRecognition(boolean clear) {
        recognizer.allocate();
        microphone.startRecording();
    }

    /**
     * Stops recognition process.
     *
     * Recognition process is paused until the next call to startRecognition.
     *
     * @see LiveSpeechRecognizer#startRecognition(boolean)
     */
    public void stopRecognition() {
        microphone.stopRecording();
        recognizer.deallocate();
    }
    
      public void closeRecognitionLine(){
      microphone.closeLine();
    }
    
}

class MicrophoneExtention {

    public final TargetDataLine line;
    private final InputStream inputStream;

    public MicrophoneExtention(
            float sampleRate,
            int sampleSize,
            boolean signed,
            boolean bigEndian) {
        AudioFormat format =
            new AudioFormat(sampleRate, sampleSize, 1, signed, bigEndian);
        try {
            line = AudioSystem.getTargetDataLine(format);
            if(line.isOpen())
            {
                line.close();
            }
        line.open();
            line.open();
        } catch (LineUnavailableException e) {
            throw new IllegalStateException(e);
        }
        inputStream = new AudioInputStream(line);
    }

    public void startRecording() {
        line.start();
    }

    public void stopRecording() {
        line.stop();
    }

    public InputStream getStream() {
        return inputStream;
    }
    
    
     public void closeLine(){
       line.close();
    }
    
    
   
}





public class demo2 extends javax.swing.JFrame  {

    /**
     * Creates new form demo2
     */
    public demo2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        lbl_app_display = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lbl_app_display.setText("jLabel1");

        jButton2.setText("stop");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                .addGap(51, 51, 51)
                .addComponent(lbl_app_display, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(lbl_app_display, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   // Microphone microphone=new Microphone()
      
    
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String str=null;
        System.out.println("button has been pressed");
        
        Configuration configuration = new Configuration();
          System.out.println("configuration object made");
        // Set path to the acoustic model.
        lbl_app_display.setText("start speaking");
        
        configuration.setAcousticModelPath("resource:/edu/cmu/sphinx/models/en-us/en-us");
        // Set path to the dictionary.
        System.out.println("AcousticModelPath set");
        configuration.setDictionaryPath("6282.dic");
        // Set path to the language model.
        configuration.setLanguageModelPath("6282.lm");
          System.out.println("LanguageModelPath and dictionary set");
        //Recognizer object, Pass the Configuration object
       
        LiveSpeechRecognizerExtention recognize = null;
        try {
            recognize = new LiveSpeechRecognizerExtention(configuration);
            System.out.println("config passed to live speech recog");
        } catch (IOException ex) {
            Logger.getLogger(demo.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        System.out.println("start speaking");
        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
          System.out.println("recognize  startRecognition(true);");
        //Creating SpeechResult object
        SpeechResult result;
       System.out.println("creation of speech result");
        //Check if recognizer recognized the speech
        while((result = recognize.getResult()) != null)
        {
                   System.out.println("if the speech is recognized and that something has been said");

            //Get the recognized speech
            String command = result.getHypothesis();
                               System.out.println("got the command");
             lbl_app_display.setText(command);
             System.out.println(command);
            String work = null;
            Process p;
            
           // String a=;
             //String a1 = ;
            if(command.equalsIgnoreCase("exit"))
            {
                System.out.println("exit");
                lbl_app_display.setText("exit");
                break;
            }
 
            else if(command.equalsIgnoreCase("open file manager"))
            {
                System.out.println("open file manager");
                lbl_app_display.setText("open file manager");
                    work = "explorer" ;
            }
            else if (command.equalsIgnoreCase("close file manager"))
            {
                lbl_app_display.setText("close file manager");
                System.out.println("close file manager");
            work = "Taskkill /IM explorer.exe /F";
            
             } 
            else if (command.equalsIgnoreCase("open browser"))
            {
                System.out.println("open browser!");
                lbl_app_display.setText("open browser");
               work = "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe";
              
                str = "open browser";
             }
            else if (command.equalsIgnoreCase("close browser"))
            {
                System.out.println("close browser");
               work = "Taskkill /IM chrome.exe /F";
               lbl_app_display.setText("close browser");
               str = "close browser";
               

            }
        
            //In case command recognized is none of the above hence work might be null
            if(work != null) 
            {
                try {
                    //Execute the command
                    
                    //lbl_app_display.setText(str);
                    p = Runtime.getRuntime().exec(work);
                    //recognize
                   /* recognize.stopRecognition();
                     recognize.closeRecognitionLine();
                     recognize=new LiveSpeechRecognizerExtention(configuration);
            recognize.startRecognition(true);*/
                    //System.gc();
                    System.out.println("work done!");
                    lbl_app_display.setText(str);
                    // break;
                }
                catch (IOException ex)
                {
                    Logger.getLogger(demo.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
       // lbl_app_display.setText("you pressed the button");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.out.println("stopped");
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(demo2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(demo2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(demo2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(demo2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run() {
                System.out.println("before calling ");
                new demo2().setVisible(true);
                System.out.println("after calling");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel lbl_app_display;
    // End of variables declaration//GEN-END:variables
}
